/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pages;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.How;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Daniyal (iamdaniyalz.pro@gmail.com)
 *
 */
public class Checkout extends BaseWebPage{

    public Checkout(WebDriver driver) {
        super(driver);
    }

    @FindBy(how = How.ID, using = "divBagTotalLink")
    private WebElement Checkout;

    @FindBy(how = How.XPATH, using = "//td[@class='productdesc']//a[@href=\"/official-vintage-band-t-shirt-rolling-stones-600311#colcode=60031126\"]" +
            "/../../..//a[@class='BasketQuantBut s-basket-plus-button']")
    private WebElement IncreaseQuantity;

    @FindBy(how = How.XPATH, using = "//a[text()='Update bag']")
    private WebElement UpdateBag;

    @FindBy(how = How.ID, using = "TotalValue")
    private WebElement ActualTotalValue;

    @FindBy(how = How.XPATH, using = "//div[@id='dnn_ctr1628848_ViewBasket_BasketDetails_gvBasketDetails']" +
            "//td[@class='itemtotalprice']//span[@class='money']")
    private List<WebElement> ProductPrices;

    float ActualProductPrice = 0;
    float SumProductPrice = 0;

    public String goToCheckout(){
        Checkout.click();
        if(waitForElement(IncreaseQuantity)){
            return "Navigated to checkout page";
        }
        return "Did not navigate to checkout page";
    }

    public String increaseProductQuantity() throws InterruptedException {
        if(waitForElement(IncreaseQuantity)) {
            Click(IncreaseQuantity);
            Click(UpdateBag);
            Thread.sleep(5000);
            return "Product quantity increased";
        }
        return "Product quantity did not increase";
    }

    public float getActualTotalPrice() throws InterruptedException {
        String totalPrice = ActualTotalValue.getText();
        totalPrice = totalPrice.substring(1);
        ActualProductPrice = Float.parseFloat(totalPrice);
        System.out.println("Actual Total price is Â£"+ActualProductPrice);
        return ActualProductPrice;
    }

    public float getProductPrice() throws ParseException {
        List<String> ProductPriceList = new ArrayList<String>();
        for (WebElement ProductsPrice : ProductPrices) {
            ProductPriceList.add(ProductsPrice.getText());
        }
        System.out.println("Individual Product prices" + ProductPriceList);
        for (int i = 0; i < ProductPriceList.size(); i++) {
            String prodPrice= ProductPriceList.get(i).substring(1);
            float TempProductPrice = Float.parseFloat(prodPrice);
            SumProductPrice = SumProductPrice + TempProductPrice;
        }
        System.out.println("Sum of products price is "+SumProductPrice);
        return SumProductPrice;
    }

    public String compareTotalPrice() {
        if(Float.compare(ActualProductPrice, SumProductPrice) == 0){
            System.out.println("Total Sum of Products Prices is EQUAL to the Actual Total Price Calculated");
            return "Price validated";
        }
        else {
            System.out.println("Total Sum of Products Prices is NOT EQUAL to the Actual Total Price Calculated");
        }
        return "Price not validated";
    }
}
